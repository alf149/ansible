# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"
#ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # # Default Virtualbox settings
  # config.vm.box_check_update = true
  # config.ssh.insert_key = true
  # config.vm.synced_folder ".", "/vagrant", disabled: true

  # Defaults RAM and CPU for all
  
  # config.vm.provider "libvirt" do |v|
  #   #v.gui = false
  #   v.memory = 2048
  #   v.cpus = 2
  #   #v.linked_clone = true
  #   #v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  #   #v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
  # end
  
  #### Home lab
  # docker01
  config.vm.define "docker01.test", autostart: false do |docker01|
    docker01.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    end
    docker01.vm.box = "generic/ubuntu2004"
    docker01.vm.box_check_update = true
    docker01.vm.hostname = "docker01.test"
    docker01.vm.network :private_network, ip: "192.168.56.10", hostname: true
    docker01.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      #ansible.galaxy_role_file = "requirements.yml"
      ansible.playbook = "provision.yml"
    end
  end

  # srv01
  config.vm.define "srv01.test", autostart: false do |srv01|
    srv01.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    end
    srv01.vm.box = "generic/ubuntu2004"
    srv01.vm.box_check_update = true
    srv01.vm.hostname = "srv01.test"
    srv01.vm.network :private_network, ip: "192.168.56.11", hostname: true
    srv01.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      #ansible.galaxy_role_file = "requirements.yml"
      ansible.playbook = "provision.yml"
    end
  end

  # srv02
  config.vm.define "srv02.test", autostart: false do |srv02|
    srv02.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    end
    srv02.vm.box = "generic/ubuntu2004"
    srv02.vm.box_check_update = true
    srv02.vm.hostname = "srv02.test"
    srv02.vm.network :private_network, ip: "192.168.56.12", hostname: true
    srv02.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end
  
  # srv03
  config.vm.define "srv03.test", autostart: false do |srv03|
    srv03.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    end
    srv03.vm.box = "generic/ubuntu2004"
    srv03.vm.box_check_update = true
    srv03.vm.hostname = "srv03.test"
    srv03.vm.network :private_network, ip: "192.168.56.13", hostname: true
    srv03.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end

  #### Testing distroes
  #

  #ubt2110 192.168.56.50 generic/ubuntu2110
  config.vm.define "ubt2110.test", autostart: true do |ubt2110|
    ubt2110.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      v.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
      v.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
    end
    ubt2110.vm.box = "generic/ubuntu2110"
    ubt2110.vm.box_check_update = true
    ubt2110.vm.hostname = "ubt2110.test"
    ubt2110.vm.network :private_network, ip: "192.168.56.50", hostname: true
    ubt2110.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end

  #roc8 192.168.56.51 generic/rocky8
  config.vm.define "roc8.test", autostart: true do |roc8|
    roc8.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      v.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
      v.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
    end
    roc8.vm.box = "generic/rocky8"
    roc8.vm.box_check_update = true
    roc8.vm.hostname = "roc8.test"
    roc8.vm.network :private_network, ip: "192.168.56.51", hostname: true
    roc8.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end

  #deb11 192.168.56.52 generic/debian11
  config.vm.define "deb11.test", autostart: true do |deb11|
    deb11.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      v.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
      v.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
    end
    deb11.vm.box = "generic/debian11"
    deb11.vm.box_check_update = true
    deb11.vm.hostname = "deb11.test"
    deb11.vm.network :private_network, ip: "192.168.56.52", hostname: true
    deb11.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end

  #deb10 192.168.56.53 generic/debian10
  config.vm.define "deb10.test", autostart: true do |deb10|
    deb10.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      v.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
      v.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
    end
    deb10.vm.box = "generic/debian10"
    deb10.vm.box_check_update = true
    deb10.vm.hostname = "deb10.test"
    deb10.vm.network :private_network, ip: "192.168.56.53", hostname: true
    deb10.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end

  #alma8 192.168.56.54 generic/alma8
  config.vm.define "alma8.test", autostart: true do |alma8|
    alma8.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      v.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
      v.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
    end
    alma8.vm.box = "generic/alma8"
    alma8.vm.box_check_update = true
    alma8.vm.hostname = "alma8.test"
    alma8.vm.network :private_network, ip: "192.168.56.54", hostname: true
    alma8.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end

  # ora8 192.168.56.55 generic/oracle8
  config.vm.define "ora8.test", autostart: true do |ora8|
    ora8.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      v.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
      v.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
    end
    ora8.vm.box = "generic/oracle8"
    ora8.vm.box_check_update = true
    ora8.vm.hostname = "ora8.test"
    ora8.vm.network :private_network, ip: "192.168.56.55", hostname: true
    ora8.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end

  #ora7  192.168.56.56
  config.vm.define "ora7.test", autostart: true do |ora7|
    ora7.vm.provider "virtualbox" do |v|
      v.memory = 1024
      v.cpus = 1
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
      v.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
      v.customize ["modifyvm", :id, "--uartmode1", "file", File::NULL]
    end
    ora7.vm.box = "generic/oracle7"
    ora7.vm.box_check_update = true
    ora7.vm.hostname = "ora7.test"
    ora7.vm.network :private_network, ip: "192.168.56.56", hostname: true
    ora7.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end

  #Windows-server 2019/2022
  #win2019
  config.vm.define "win2019.test", autostart: false do |win2019|
    win2019.vm.provider "virtualbox" do |v|
      v.gui = false
      v.memory = 4096
      v.cpus = 2
      v.linked_clone = true
      v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
    end
    win2019.vm.box = "gusztavvargadr/windows-server"
    win2019.vm.box_check_update = true
    win2019.vm.hostname = "win2019"
    win2019.vm.network :private_network, ip: "192.168.56.60", hostname: true
    win2019.vm.provision "shell", path: "files/windows/setup_winrm.ps1"
  end

  #kali
  config.vm.define "kali", autostart: false do |kali|
    kali.vm.provider "virtualbox" do |v|
      v.gui = false
      v.memory = 2048
      v.cpus = 2
    end
    kali.vm.box = "kalilinux/rolling"
    kali.vm.box_check_update = true
  end

end