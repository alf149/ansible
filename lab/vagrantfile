# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'libvirt'
#ENV['VAGRANT_DEFAULT_PROVIDER'] = 'virtualbox'

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  
  #### Home lab
 
  # srv01
  config.vm.define "srv01.test", autostart: false do |srv01|
    srv01.vm.provider "libvirt" do |v|
      v.memory = 2048
      v.cpus = 2
    end
    srv01.vm.box = "generic/ubuntu2204"
    srv01.vm.box_check_update = false
    srv01.vm.hostname = "srv01.test"
    srv01.vm.network :private_network, ip: "192.168.56.21", hostname: true
    srv01.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end

  # srv02
  config.vm.define "srv02.test", autostart: false do |srv02|
    srv02.vm.provider "libvirt" do |v|
      v.memory = 2048
      v.cpus = 2
    end
    srv02.vm.box = "generic/ubuntu2204"
    srv02.vm.box_check_update = false
    srv02.vm.hostname = "srv02.test"
    srv02.vm.network :private_network, ip: "192.168.56.22", hostname: true
    srv02.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end
  
  # srv03
  config.vm.define "srv03.test", autostart: false do |srv03|
    srv03.vm.provider "libvirt" do |v|
      v.memory = 2048
      v.cpus = 2
    end
    srv03.vm.box = "generic/ubuntu2204"
    srv03.vm.box_check_update = false
    srv03.vm.hostname = "srv03.test"
    srv03.vm.network :private_network, ip: "192.168.56.23", hostname: true
    srv03.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end
  
  # srv04
  config.vm.define "srv04.test", autostart: false do |srv04|
    srv04.vm.provider "libvirt" do |v|
      v.memory = 2048
      v.cpus = 2
    end
    srv04.vm.box = "generic/ubuntu2204"
    srv04.vm.box_check_update = false
    srv04.vm.hostname = "srv04.test"
    srv04.vm.network :private_network, ip: "192.168.56.24", hostname: true
    srv04.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "provision.yml"
    end
  end
  
  #win2022
  config.vm.define "win2022.test", autostart: false do |win2022|
    win2022.vm.provider "libvirt" do |v|
      v.memory = 4096
      v.cpus = 2
    end
    win2022.vm.box = "peru/windows-server-2022-standard-x64-eval"
    win2022.vm.box_check_update = false
    win2022.vm.hostname = "win2022"
    win2022.vm.network :private_network, ip: "192.168.56.81", hostname: true
    win2022.vm.network :forwarded_port, guest: 3389, host: 53389, auto_correct: true
    win2022.vm.network :forwarded_port, guest: 80, host: 680, auto_correct: true
    win2022.vm.network :forwarded_port, guest: 443, host: 6443, auto_correct: true
    win2022.vm.boot_timeout = 300
    win2022.winrm.execution_time_limit = "PT2H"
    win2022.winrm.ssl_peer_verification = false
    win2022.winrm.max_tries = 50
    win2022.winrm.retry_delay = 10
    win2022.vm.provision "ansible" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.config_file = "ansible.cfg"
      ansible.playbook = "server_windows.yml"
    end
  end

end

