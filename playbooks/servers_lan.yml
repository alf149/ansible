---
#
# Tasks and roles for all hosts
#
# ansible-vault encrypt_string 'TEKST' --name 'VAR'
# 
- name: Run on all PROD_SERVERS
  hosts: prod_servers
  gather_facts: true
  become: true

  vars_files: ../group_vars/secrets.yml

  roles:
    - role: system
      tags: system
    - role: geerlingguy.security
      tags: security
    - role: geerlingguy.ntp
      tags: ntp

  tasks:
    - name: Upgrade apt packages (Debian and Ubuntu)
      when: enable_os_update
      tags: os_update
      block:
        - name: Upgrade apt packages (Debian and Ubuntu)
          ansible.builtin.apt:
            force_apt_get: true
            upgrade: true
            autoremove: true
            update_cache: true
            cache_valid_time: 3600
          when:
            - ansible_os_family | lower == "debian"
            - enable_os_update
          changed_when: false
        - name: Check if a reboot is needed on all servers
          register: reboot_required_file
          ansible.builtin.stat:
            path: /var/run/reboot-required
        - name: Reboot the box if kernel updated
          ansible.builtin.reboot:
            msg: "Reboot initiated by Ansible for kernel updates"
          when: reboot_required_file.stat.exists

###
- name: Run on "cloud01.lan"
  hosts: cloud01.lan
  gather_facts: true
  become: true

  vars_files: ../group_vars/secrets.yml

  roles:
    - role: ufw
      tags: ufw
# manual installed tailscale
# manual install Cloudflare tunnels
# curl -L --output cloudflared.deb https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb && sudo dpkg -i cloudflared.deb
# sudo systemctl restart cloudflared.service


###
- name: Run on "caddy01.lan"
  hosts: caddy01.lan
  gather_facts: true
  become: true

  vars_files: ../group_vars/secrets.yml

  roles:
    - role: ufw
      tags: ufw
    - role: caddy
      tags:
        - caddy
        - caddyfile

###
- name: Run on "speed.lan"
  hosts: speed.lan
  gather_facts: true
  become: true

  vars_files: ../group_vars/secrets.yml

  roles:
    - role: ufw
      tags: ufw

###
- name: Run on "docker01"
  hosts: docker01.lan
  gather_facts: true
  become: true

  vars_files: ../group_vars/secrets.yml

  roles:
    - role: geerlingguy.pip
      tags: containers
    - role: geerlingguy.docker
      tags: containers
    - role: ufw
      tags: ufw
    - role: nfsclient
      tags: nfs
    - role: ironicbadger.docker_compose_generator
      tags: docker

  tasks:
    - name: Check if nonfs folder exits exists
      tags: docker
      ansible.builtin.stat:
        path: "{{ nonfs_appdata_path }}"
      register: stat_nonfs
    - name: Create a directory if it does not exist
      tags: docker
      ansible.builtin.file:
        path: "{{ nonfs_appdata_path }}"
        state: directory
        mode: '0755'
      when: not stat_nonfs.stat.exists

    - name: Check if  nfs/appdata_path/homepage/config folder exits exists
      tags: docker
      ansible.builtin.stat:
        path: "{{ appdata_path }}/homepage/config"
      register: stat_homepage

    - name: Create a directory if it does not exist
      tags: docker
      ansible.builtin.file:
        path: "{{ appdata_path }}/homepage/config"
        state: directory
        mode: '0755'
      when: not stat_homepage.stat.exists

    - name: Docker | backup uptime-kuma
      become_user: deploy
      changed_when: false
      tags: uptimebackup
      ansible.builtin.command: 'rsync -rvz /opt/docker_static/uptimekuma /opt/docker/'
      # rsync -rvz /opt/docker_static/uptimekuma /opt/docker/
      # https://docs.ansible.com/ansible/latest/collections/ansible/builtin/cron_module.html#examples

    # - name: Synchronize two directories on one remote host.
    #   ansible.posix.synchronize:
    #     src: "{{ nonfs_appdata_path }}/uptimekuma"
    #     dest: "{{ nfsclient_local_folder }}/uptimekuma"
    #   delegate_to: "{{ docker01.lan }}"

    - name: Docker | docker compose installed?
      tags: docker
      ansible.builtin.command: which docker
      ignore_errors: true
      register: dcp_installed
      changed_when: dcp_installed.rc != 0
    - name: Docker | container update procedure
      tags: docker
      when: dcp_installed.rc == 0
      block:
        - name: Docker | pull containers
          changed_when: false
          ansible.builtin.command: docker compose pull
        - name: Docker | start updated containers
          changed_when: false
          ansible.builtin.command: docker compose up -d
        - name: Docker | cleanup old containers
          changed_when: false
          ansible.builtin.command: docker system prune --all -f

###
- name: Run on "pi1.lan and pi2.lan"
  hosts: pi1.lan, pi2.lan
  gather_facts: true
  become: true

  vars_files: ../group_vars/secrets.yml

  roles:
    - role: ufw
      tags: ufw

  tasks:
    - name: Add ssh authorized_keys to users
      ansible.posix.authorized_key:
        user: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          32306365653061653732623066353232363763363362663036303336313563663331393431356563
          6162313465373734373862623236393636336331616665370a373662333138353236396437616430
          39303832333330396234653333366331396366666164643761386262663934313866636364633238
          6330363463306339380a353839656537373530653139303063363436303631313439653932353163
          3034
        key: "{{ pi_sync_key }}"
        exclusive: false

    - name: Update PiHole with bash
      register: ouputup
      changed_when: ouputup.rc != 0
      ansible.builtin.command: "/usr/local/bin/pihole -up"
      when: enable_pihole_update
      tags: piholeupdate
    - name: Update PiHole Gravaty with bash
      register: ouputg
      changed_when: ouputg.rc != 0
      ansible.builtin.command: "/usr/local/bin/pihole -g"
      when: enable_pihole_update
      tags: piholeupdate
    - name: Restart PiHole DNS with bash
      register: ouputdns
      changed_when: ouputdns.rc != 0
      ansible.builtin.command: "/usr/local/bin/pihole restartdns reload"
      when: enable_pihole_update
      tags: piholeupdate

###
- name: Include Mail server setup
  ansible.builtin.import_playbook: servers_mail_lan.yml

# - name: Run on "mail"
#   hosts: mail.lan
#   gather_facts: true
#   become: true

#   vars_files: ../group_vars/secrets.yml

#   roles:
#     - role: ufw
#       tags: ufw
#     - role: postfix
#       tags: postfix
